{"version":3,"sources":["Components/Header/index.js","Components/OptionsMenu/DifficultySelect/index.js","Components/OptionsMenu/index.js","Components/Board/Block/Cell/index.js","Components/Board/Block/index.js","utils.js","Components/Board/index.js","Components/Controls/index.js","App.js","hooks/useKeyPress.js","index.js"],"names":["Header","onNewGame","className","href","target","rel","onClick","difficultyOptions","value","label","customStyles","control","styles","backgroundColor","width","padding","margin","option","state","isSelected","DifficultySelect","nonEmptyCells","onChangeDifficulty","filter","onChange","options","autoFocus","theme","colors","text","neutral0","neutral80","OptionsMenu","time","checkMistakes","onChangeCheckMistakes","onColor","checked","Date","toTimeString","split","slice","join","Cell","cellIndex","onSelect","selectedNumber","isFixed","isHighlighted","isCorrect","Block","cellsMatrix","fixedCells","highlightedCells","selectedCell","onSelectCell","grid","solution","map","row","rowIndex","colIndex","SIZE","SIDE_LENGTH","Math","sqrt","BLOCK_SIZE","FALSE_ARRAY","Array","fill","BLOCK_MATRIX","CELLS_BY_BLOCK","0","1","2","3","4","5","6","7","8","matrixIndices","arrayIndex","floor","getRowNumber","i","getColumnNumber","getBlockNumber","col","getHighlightedCells","index","_","areInSameRow","areInSameColumn","areInSameBlock","cipher","arr","mask","j","temp","length","random","shuffle","randomIntWithinBlockIndex","choice","includes","v","randomIndicesPairWithinBlock","swapRow","undefined","swapColumn","BASE_VALID_SUDOKU","generateBoard","emptyCells","copy","rotate","verticalMirroring","horizontalMirroring","GRID_INPUTS","Board","blockIndex","NUMBERS","Controls","onNumberClick","buttons","onUndo","onDelete","onHint","button","val","App","action","useState","setTime","solved","setSolved","setNonEmptyCells","setCheckMistakes","setFixedCells","setGrid","setSolution","setSelectedCell","setHighlightedCells","setSelectedNumber","gridInputStack","setGridInputStack","inputCellIndexStack","setInputCellIndexStack","useEffect","handleNewGame","interval","setInterval","clearInterval","e","key","handleInput","parseInt","handleDelete","handleHint","handleUndo","window","addEventListener","removeEventListener","number","newGrid","n","every","alert","lastCellIndex","newGridInputStack","prev","newSolution","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80264d00.chunk.js","sourcesContent":["const Header = ({ onNewGame }) =>\r\n    <header className=\"row-center\">\r\n        <p><a\r\n            className=\"App-link\"\r\n            href=\"https://daalgi.github.io/my-site/#/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n            David A.G.\r\n        </a></p>\r\n        <div className=\"cell unselectable\" onClick={onNewGame}>\r\n            New Game\r\n        </div>\r\n    </header>\r\n\r\nexport default Header","import Select from 'react-select'\r\n\r\n\r\nconst difficultyOptions = [\r\n    { value: 53, label: 'Very easy' },\r\n    { value: 45, label: 'Easy' },\r\n    { value: 35, label: 'Medium' },\r\n    { value: 30, label: 'Hardy' },\r\n    { value: 25, label: 'Hard' },\r\n    { value: 20, label: 'Very hard' }\r\n]\r\n\r\nconst customStyles = {\r\n    control: styles => ({ \r\n        ...styles, \r\n        backgroundColor: '#282c34',\r\n        width: \"140px\",\r\n        padding: 0,\r\n        margin: 0\r\n    }),\r\n    option: (styles, state) => ({\r\n        ...styles,\r\n        backgroundColor: state.isSelected \r\n            ? 'hsl(220, 13%, 60%)' \r\n            : 'hsl(220, 13%, 18%)',\r\n    })    \r\n}\r\n\r\nconst DifficultySelect = ({ nonEmptyCells, onChangeDifficulty }) =>\r\n    <Select\r\n        label=\"Difficulty\"\r\n        value={difficultyOptions.filter(({ value }) => \r\n            value === nonEmptyCells )}\r\n        onChange={onChangeDifficulty}\r\n        options={difficultyOptions}\r\n        styles={customStyles}\r\n        autoFocus={true}\r\n        theme={theme => ({\r\n            ...theme,\r\n            colors: {\r\n                ...theme.colors,\r\n                text: 'white',\r\n                neutral0: '#282c34',\r\n                neutral80: 'white'\r\n            }\r\n        })}\r\n    />\r\n\r\nexport default DifficultySelect","import Switch from 'react-switch'\r\n\r\nimport DifficultySelect from './DifficultySelect'\r\n\r\n\r\nconst OptionsMenu = ({\r\n    time,\r\n    nonEmptyCells,\r\n    onChangeDifficulty,\r\n    checkMistakes,\r\n    onChangeCheckMistakes\r\n}) =>\r\n    <div className=\"row-center\">\r\n        <DifficultySelect\r\n            nonEmptyCells={nonEmptyCells}\r\n            onChangeDifficulty={onChangeDifficulty}\r\n        />\r\n        <Switch\r\n            className=\"react-switch\"\r\n            onColor=\"#2e539e\"\r\n            // handleDiameter={18}\r\n            // width={64}\r\n            checked={checkMistakes}\r\n            onChange={onChangeCheckMistakes}\r\n        />\r\n        <p>{new Date(0, 0, 0, 0, 0, time).toTimeString().split(' ')[0]\r\n                .split(':').slice(1).join(':')}</p>\r\n    </div>\r\n\r\nexport default OptionsMenu","const Cell = ({ \r\n    cellIndex, value, onSelect,\r\n    selectedNumber, checkMistakes,\r\n    isFixed, isSelected, isHighlighted, isCorrect\r\n}) => {\r\n    let className = \"unselectable cell\"\r\n    if (isFixed)\r\n        className += \" cell-fixed\"\r\n    if (isHighlighted)\r\n        className += \" cell-highlighted\"\r\n    if (isSelected)\r\n        className += \" cell-selected\"\r\n    if (selectedNumber === value)\r\n        className += \" cell-selected-number\"\r\n    if (checkMistakes && value !== 0 && !isCorrect)\r\n        className += \" red-text\"\r\n\r\n    return (\r\n        <div className={className} onClick={() => onSelect(cellIndex)}>\r\n            {value !== 0 ? value : \" \"}\r\n        </div>\r\n    )\r\n}\r\nexport default Cell","import Cell from './Cell'\r\n\r\nconst Block = ({\r\n    cellsMatrix, checkMistakes,\r\n    fixedCells, highlightedCells, selectedCell, selectedNumber,\r\n    onSelectCell,\r\n    grid, solution\r\n}) =>\r\n    <div className=\"block\">\r\n        {cellsMatrix.map((row, rowIndex) =>\r\n            <div className=\"cells-row\" key={rowIndex}> {\r\n                row.map((cellIndex, colIndex) =>\r\n                    <Cell\r\n                        key={colIndex}\r\n                        cellIndex={cellIndex}\r\n                        value={grid[cellIndex]}\r\n                        onSelect={onSelectCell}\r\n                        selectedNumber={selectedNumber}\r\n                        checkMistakes={checkMistakes}\r\n                        isFixed={fixedCells[cellIndex]}\r\n                        isHighlighted={highlightedCells[cellIndex]}\r\n                        isSelected={selectedCell === cellIndex}\r\n                        isCorrect={\r\n                            grid[cellIndex] === solution[cellIndex] ? \r\n                            true : \r\n                            false\r\n                        }\r\n                    />\r\n                )}\r\n            </div>\r\n        )}\r\n    </div>\r\n\r\nexport default Block","/**\r\n * SUDOKU CONFIGURATION PARAMETERS\r\n */ \r\nconst SIZE = 81\r\nconst SIDE_LENGTH = Math.sqrt(SIZE)\r\nconst BLOCK_SIZE = Math.sqrt(SIDE_LENGTH)\r\n\r\nconst FALSE_ARRAY = Array(SIZE).fill(false)\r\nconst NULL_ARRAY = Array(SIZE).fill(null)\r\n// const BLOCK_MATRIX = Array(BLOCK_SIZE).fill(null).map((_, row) => \r\n//     Array(BLOCK_SIZE).fill(null).map((_, col) => row * BLOCK_SIZE + col))\r\nconst BLOCK_MATRIX = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\r\nconst CELLS_BY_BLOCK = {\r\n    0: [[0, 1, 2], [9, 10, 11], [18, 19, 20]],\r\n    1: [[3, 4, 5], [12, 13, 14], [21, 22, 23]],\r\n    2: [[6, 7, 8], [15, 16, 17], [24, 25, 26]],\r\n    3: [[27, 28, 29], [36, 37, 38], [45, 46, 47]],\r\n    4: [[30, 31, 32], [39, 40, 41], [48, 49, 50]],\r\n    5: [[33, 34, 35], [42, 43, 44], [51, 52, 53]],\r\n    6: [[54, 55, 56], [63, 64, 65], [72, 73, 74]],\r\n    7: [[57, 58, 59], [66, 67, 68], [75, 76, 77]],\r\n    8: [[60, 61, 62], [69, 70, 71], [78, 79, 80]],\r\n}\r\n\r\n/**\r\n * Given the index of a flat array, \r\n * returns the row and column of the matrix equivalent.\r\n * @param {integer} arrayIndex \r\n */\r\nconst matrixIndices = arrayIndex =>\r\n    [Math.floor(arrayIndex / SIDE_LENGTH), arrayIndex % SIDE_LENGTH]\r\n\r\n/**\r\n * Given the array index `i`, get the row number,\r\n * between 0 and 8 (only valid for 9x9 grids)\r\n * @param {integer} i \r\n */\r\nconst getRowNumber = i => matrixIndices(i)[0]\r\n\r\n/**\r\n * Given the array index `i`, get the column number,\r\n * between 0 and 8 (only valid for 9x9 grids)\r\n * @param {integer} i \r\n */\r\nconst getColumnNumber = i => matrixIndices(i)[1]\r\n\r\n/**\r\n * Given the array index `i`, get the block number, \r\n * between 0 and 8, from left to right and from top to bottom.\r\n * Only valid for 9x9 grids.\r\n * @param {integer} i \r\n */\r\nconst getBlockNumber = i => {\r\n    const col = matrixIndices(i)[1]\r\n    return Math.floor(i / SIDE_LENGTH / BLOCK_SIZE) * BLOCK_SIZE +\r\n        Math.floor(col / BLOCK_SIZE)\r\n}\r\n\r\n/**\r\n * Do array indices `i` and `index` belong to the same row?\r\n * @param {integer} i\r\n * @param {integer} index\r\n */\r\nconst areInSameRow = ({ i, index }) =>\r\n    getRowNumber(i) === getRowNumber(index)\r\n\r\n/**\r\n * Do array indices `i` and `index` belong to the same column?\r\n * @param {integer} i\r\n * @param {integer} index\r\n */\r\nconst areInSameColumn = ({ i, index }) =>\r\n    getColumnNumber(i) === getColumnNumber(index)\r\n\r\n/**\r\n * Do array indices `i` and `index` belong to the same block?\r\n * @param {integer} i\r\n * @param {integer} index\r\n */\r\nconst areInSameBlock = ({ i, index }) =>\r\n    getBlockNumber(i) === getBlockNumber(index)\r\n\r\n\r\n/**\r\n * Returns an array of booleans, which indicate whether a cell\r\n * should be highlighted or not.\r\n * The ones to be highlighted are in the same row, column\r\n * and block as the cell in the array index `index`.\r\n * Only valid for 9x9 grids.\r\n * @param {integer} index \r\n */\r\nconst getHighlightedCells = index =>\r\n    FALSE_ARRAY.map((_, i) =>\r\n        areInSameRow({ i, index }) ||\r\n        areInSameColumn({ i, index }) ||\r\n        areInSameBlock({ i, index }) ? true : false)\r\n\r\n/**\r\n * Shuffle array - Fisher-Yates algorithm.\r\n * Mutable. \r\n * @param {array} arr \r\n */\r\nconst shuffle = arr => {\r\n    let j, temp\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1))\r\n        temp = arr[i]\r\n        arr[i] = arr[j]\r\n        arr[j] = temp\r\n        // [arr[i], arr[j]] = [arr[j], arr[i]]\r\n    }\r\n    return arr\r\n}\r\n\r\n/**\r\n * Random choice of an element within an array\r\n * @param {array} arr \r\n */\r\nconst choice = arr =>\r\n    arr[Math.floor(Math.random() * arr.length)]\r\n\r\n/**\r\n * Randomly cipher the numbers in the Sudoku array.\r\n * Mutable.\r\n * @param {array} arr - Sudoku array\r\n */\r\nconst cipher = arr => {\r\n    let mask = Array(SIDE_LENGTH).fill(0).map((_, i) => i + 1)\r\n    shuffle(mask)\r\n    for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = mask[arr[i] - 1]\r\n    }\r\n    return arr\r\n}\r\n\r\n/**\r\n * Returns a random row index within the block\r\n * to which `i` belongs to.\r\n * Used to swap valid rows or columns.\r\n * @param {integer} i \r\n */\r\nconst randomIntWithinBlockIndex = i => {\r\n    let arr = []\r\n    if ([0, 1, 2].includes(i)) {\r\n        arr = [0, 1, 2]\r\n    } else if ([3, 4, 5].includes(i)) {\r\n        arr = [3, 4, 5]\r\n    } else {\r\n        arr = [6, 7, 8]\r\n    }\r\n    return choice(arr.filter(v => v !== i))\r\n}\r\n\r\n/**\r\n * Returns an array of two integers, which\r\n * are the indices of rows or columns to be\r\n * swapped within a block \r\n */\r\nconst randomIndicesPairWithinBlock = () => {\r\n    let i = Math.floor(Math.random() * SIDE_LENGTH)\r\n    return [i, randomIntWithinBlockIndex(i)]\r\n}\r\n\r\n/**\r\n * Swaps two rows `i` and `j` in a Sudoku array .\r\n * Mutable.\r\n * @param {array} arr - Sudoku array\r\n * @param {integer} i - row\r\n * @param {integer} j - row \r\n */\r\nconst swapRow = (arr, i, j) => {\r\n    let temp = undefined\r\n    for (let col = 0; col < SIDE_LENGTH; col++) {\r\n        temp = arr[SIDE_LENGTH * i + col]\r\n        arr[SIDE_LENGTH * i + col] = arr[SIDE_LENGTH * j + col]\r\n        arr[SIDE_LENGTH * j + col] = temp\r\n    }\r\n    return arr\r\n}\r\n\r\n/**\r\n * Swaps two columns `i` and `j` in a Sudoku array.\r\n * Mutable.\r\n * @param {array} arr - Sudoku array\r\n * @param {integer} i - column\r\n * @param {integer} j - column\r\n */\r\nconst swapColumn = (arr, i, j) => {\r\n    let temp = undefined\r\n    for (let row = 0; row < SIDE_LENGTH; row++) {\r\n        temp = arr[row * SIDE_LENGTH + i]\r\n        arr[row * SIDE_LENGTH + i] = arr[row * SIDE_LENGTH + j]\r\n        arr[row * SIDE_LENGTH + j] = temp\r\n    }\r\n    return arr\r\n}\r\n\r\n/**\r\n * Rotates 90 degrees the Sudoku grid.\r\n * Non-mutable.\r\n * @param {array} arr - Sudoku array\r\n */\r\nconst rotate = arr => {\r\n    let copy = Array(SIZE).fill(0)\r\n    for (let row = 0; row < SIDE_LENGTH; row++) {\r\n        for (let col = 0; col < SIDE_LENGTH; col++) {\r\n            copy[col * SIDE_LENGTH + SIDE_LENGTH - 1 - row] = arr[row * SIDE_LENGTH + col]\r\n        }\r\n    }\r\n    return copy\r\n}\r\n\r\n/**\r\n * Vertical mirroring.\r\n * Non-mutable\r\n * @param {array} arr - Sudoku array\r\n */\r\nconst verticalMirroring = arr => {\r\n    let copy = Array(SIZE).fill(0)\r\n    for (let row = 0; row < SIDE_LENGTH; row++) {\r\n        for (let col = 0; col < SIDE_LENGTH; col++) {\r\n            copy[row * SIDE_LENGTH + col] = arr[(SIDE_LENGTH - row - 1) * SIDE_LENGTH + col]\r\n        }\r\n    }\r\n    return copy\r\n}\r\n\r\n/**\r\n * Horizontal mirroring.\r\n * Non-mutable\r\n * @param {array} arr - Sudoku array\r\n */\r\nconst horizontalMirroring = arr => {\r\n    let copy = Array(SIZE).fill(0)\r\n    for (let row = 0; row < SIDE_LENGTH; row++) {\r\n        for (let col = 0; col < SIDE_LENGTH; col++) {\r\n            copy[row * SIDE_LENGTH + col] = arr[row * SIDE_LENGTH + (SIDE_LENGTH - col - 1)]\r\n        }\r\n    }\r\n    return copy\r\n}\r\n\r\nconst BASE_VALID_SUDOKU = [\r\n    1, 2, 3, 4, 5, 6, 7, 8, 9,\r\n    7, 8, 9, 1, 2, 3, 4, 5, 6,\r\n    4, 5, 6, 7, 8, 9, 1, 2, 3,\r\n    3, 4, 5, 6, 7, 8, 9, 1, 2,\r\n    9, 1, 2, 3, 4, 5, 6, 7, 8,\r\n    6, 7, 8, 9, 1, 2, 3, 4, 5,\r\n    5, 6, 7, 8, 9, 1, 2, 3, 4,\r\n    2, 3, 4, 5, 6, 7, 8, 9, 1,\r\n    8, 9, 1, 2, 3, 4, 5, 6, 7,\r\n]\r\n\r\n/**\r\n * Generates a random 9x9 sudoku from the \r\n * `DEFAULT_SUDOKU` array previously defined\r\n * @param {integer} nonEmptyCells - number of non-empty cells\r\n */\r\nconst generateBoard = ({ nonEmptyCells }) => {\r\n    let emptyCells = SIZE - nonEmptyCells\r\n\r\n    // Generate a valid solution\r\n    let solution = cipher([...BASE_VALID_SUDOKU])\r\n    // let solution = [...DEFAULT_SUDOKU]    \r\n    swapRow(solution, ...randomIndicesPairWithinBlock())\r\n    swapColumn(solution, ...randomIndicesPairWithinBlock())\r\n\r\n    solution = rotate(solution)\r\n    swapRow(solution, ...randomIndicesPairWithinBlock())\r\n    swapColumn(solution, ...randomIndicesPairWithinBlock())\r\n\r\n    solution = verticalMirroring(solution)\r\n    swapRow(solution, ...randomIndicesPairWithinBlock())\r\n    swapColumn(solution, ...randomIndicesPairWithinBlock())\r\n\r\n    solution = horizontalMirroring(solution)\r\n    swapRow(solution, ...randomIndicesPairWithinBlock())\r\n    swapColumn(solution, ...randomIndicesPairWithinBlock())\r\n\r\n    // Empty random cells\r\n    let grid = [...solution]\r\n    let i\r\n    while (emptyCells > 0) {\r\n        // Random index\r\n        i = Math.floor(Math.random() * SIZE)\r\n        // let [row, col] = matrixIndices(i)\r\n\r\n        if (grid[i] !== 0) {\r\n            grid[i] = 0\r\n            // Subtract the emptied cells\r\n            emptyCells--\r\n        }\r\n    }\r\n\r\n    return [grid, solution]\r\n}\r\n\r\nconst GRID_INPUTS = Array(SIZE).fill(null).map(() => [])\r\n\r\nexport {\r\n    FALSE_ARRAY,\r\n    NULL_ARRAY,\r\n    GRID_INPUTS,\r\n    BLOCK_MATRIX,\r\n    CELLS_BY_BLOCK,\r\n    getHighlightedCells,\r\n    generateBoard\r\n}","import Block from './Block'\r\nimport { BLOCK_MATRIX, CELLS_BY_BLOCK } from '../../utils'\r\n\r\n\r\nconst Board = ({\r\n    fixedCells, highlightedCells, selectedCell, selectedNumber,\r\n    onSelectCell, \r\n    grid, solution, checkMistakes\r\n}) =>\r\n    <div className=\"board\">\r\n        {BLOCK_MATRIX.map((row, rowIndex) =>\r\n            <div className=\"block-row\" key={rowIndex}>\r\n                {row.map((blockIndex, colIndex) => {\r\n                    return <Block\r\n                        key={colIndex}\r\n                        checkMistakes={checkMistakes}\r\n                        cellsMatrix={CELLS_BY_BLOCK[blockIndex]}\r\n                        fixedCells={fixedCells}\r\n                        highlightedCells={highlightedCells}\r\n                        selectedCell={selectedCell}\r\n                        selectedNumber={selectedNumber}\r\n                        onSelectCell={onSelectCell}\r\n                        grid={grid}\r\n                        solution={solution}\r\n                    />\r\n                }\r\n                )}\r\n            </div>\r\n        )}\r\n    </div>\r\n\r\nexport default Board","const NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n\r\nconst Controls = ({ onNumberClick, onUndo, onDelete, onHint }) => {\r\n    const buttons = [\r\n        { label: \"Undo\", onClick: onUndo },\r\n        { label: \"Delete\", onClick: onDelete },\r\n        { label: \"Hint\", onClick: onHint }\r\n    ]\r\n    return (\r\n        <div className=\"controls\">\r\n            <div className=\"row margin-h\">\r\n                {buttons.map((button, index) =>\r\n                    <div\r\n                        key={index}\r\n                        className=\"cell unselectable button-width100\"\r\n                        onClick={button.onClick}\r\n                    >\r\n                        {button.label}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"row margin-h\">\r\n                {NUMBERS.map((val, index) =>\r\n                    <div\r\n                        key={index}\r\n                        className=\"cell unselectable button-width100\"\r\n                        onClick={() => onNumberClick(val)}\r\n                    >\r\n                        {val}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import { useState, useEffect } from 'react'\nimport useKeyPress from './hooks/useKeyPress'\nimport './App.css'\nimport Header from './Components/Header'\nimport OptionsMenu from './Components/OptionsMenu'\nimport Board from './Components/Board'\nimport Controls from './Components/Controls'\nimport {\n    FALSE_ARRAY, GRID_INPUTS,\n    getHighlightedCells, generateBoard\n} from './utils'\n\n\nfunction App() {\n    // Options related state variables\n    const [time, setTime] = useState(0)\n    const [solved, setSolved] = useState(false)\n    const [nonEmptyCells, setNonEmptyCells] = useState(35)\n    const [checkMistakes, setCheckMistakes] = useState(false)\n\n    // Board related state variables\n    const [fixedCells, setFixedCells] = useState(FALSE_ARRAY)\n    const [grid, setGrid] = useState([])\n    const [solution, setSolution] = useState([])\n    const [selectedCell, setSelectedCell] = useState(null)\n    const [highlightedCells, setHighlightedCells] = useState(FALSE_ARRAY)\n    const [selectedNumber, setSelectedNumber] = useState(0)\n\n    // Undo realted state variables\n    const [gridInputStack, setGridInputStack] = useState([])\n    const [inputCellIndexStack, setInputCellIndexStack] = useState([])\n\n    useEffect(() => {\n        handleNewGame()\n    }, [])\n\n    useEffect(() => {\n        // Timer\n        let interval\n        if (!solved) {\n            interval = setInterval(() => setTime(time + 1), 1000)\n        }\n        return () => clearInterval(interval)\n    }, [time])\n\n    useKeyPress((e) => {\n        // e.preventDefault()\n        if (selectedCell == null || fixedCells[selectedCell])\n            return\n        if (e.key > 0 && e.key < 10)\n            handleInput(parseInt(e.key))\n        else if (e.key === \"Delete\" || e.key === \"Backspace\")\n            handleDelete()\n        else if (e.key === \"h\")\n            handleHint()\n        else if (e.key === \"u\")\n            handleUndo()\n    })\n\n    const handleSelectCell = index => {\n        const number = grid[index]\n        setHighlightedCells(getHighlightedCells(index))\n        setSelectedCell(index)\n        setSelectedNumber(number > 0 ? number : null)\n    }\n\n    const handleChangeCheckMistakes = () =>\n        setCheckMistakes(!checkMistakes)\n\n    const handleInput = number => {\n        if (fixedCells[selectedCell])\n            return\n\n        if (number > -1 && number < 10) {\n            // Update the grid\n            let newGrid = grid.map((n, i) => i === selectedCell ? parseInt(number) : n)\n            setGrid(newGrid)\n\n            // Update the `gridInputStack` with the \n            // added number to the current cell\n            // to keep track of the order of inputs and allow undo\n            setGridInputStack(gridInputStack.map((v, i) =>\n                i === selectedCell ? [...v, number] : v))\n\n            // Add the current cell index to know the order of the inputs\n            setInputCellIndexStack([...inputCellIndexStack, selectedCell])\n\n            // If the input was a number (not a 0 or `delete`),\n            // update the current selected number (for highlighting)\n            if (number > 0)\n                setSelectedNumber(number)\n\n            // If solved\n            if (newGrid.every((v, i) => v === solution[i])) {\n                setSolved(true)\n                alert(\"You solved it!!\\nCongratulations!!\")\n            }\n        }\n    }\n\n    const handleDelete = () => {\n        // If the cell is not fixed, delete the number it contains\n        if (!fixedCells[selectedCell])\n            handleInput(0)\n    }\n\n    const handleUndo = () => {\n        // If there's no element in the `inputCellIndexTack`, do nothing\n        if (!inputCellIndexStack.length)\n            return\n\n        // Remove the last value of the last cell input\n        let lastCellIndex = inputCellIndexStack[inputCellIndexStack.length - 1]\n        let newGridInputStack = gridInputStack.map((v, i) =>\n            i === lastCellIndex ? v.slice(0, -1) : v)\n\n        // Update the value in the grid with the previous one\n        let prev = newGridInputStack[lastCellIndex].slice(-1)[0]\n        setGrid(grid.map((v, i) => i === lastCellIndex ? prev : v))\n\n        // Update the input stack related state variables\n        setGridInputStack(newGridInputStack)\n        setInputCellIndexStack(inputCellIndexStack.slice(0, -1))\n    }\n\n    const handleHint = () => {\n        // If the cell is not fixed, input the solution\n        if (!fixedCells[selectedCell]) {\n            handleInput(solution[selectedCell])\n        }\n    }\n\n    const handleChangeDifficulty = ({ value }) =>\n        setNonEmptyCells(parseInt(value))\n\n    const handleNewGame = () => {\n        const [newGrid, newSolution] = generateBoard({ nonEmptyCells })\n        setGrid(newGrid)\n        setSolution(newSolution)\n        setGridInputStack(GRID_INPUTS.map(() => []))\n        setFixedCells(newGrid.map(v => v ? true : false))\n        setSelectedNumber(false)\n        setTime(0)\n        setSolved(false)\n    }\n\n    console.log(nonEmptyCells)\n    return (\n        <div className=\"App\">\n            <Header\n                onNewGame={handleNewGame}\n            />\n            <OptionsMenu\n                time={time}\n                nonEmptyCells={nonEmptyCells}\n                onChangeDifficulty={handleChangeDifficulty}\n                checkMistakes={checkMistakes}\n                onChangeCheckMistakes={handleChangeCheckMistakes}\n            />\n            <Board\n                checkMistakes={checkMistakes}\n                fixedCells={fixedCells}\n                highlightedCells={highlightedCells}\n                selectedCell={selectedCell}\n                selectedNumber={selectedNumber}\n                onSelectCell={handleSelectCell}\n                grid={grid}\n                solution={solution}\n            />\n            <Controls\n                onNumberClick={handleInput}\n                onUndo={handleUndo}\n                onDelete={handleDelete}\n                onHint={handleHint}\n            />\n        </div>\n    )\n}\n\nexport default App","import { useEffect } from 'react'\r\n\r\nexport default function useKeyPress(action) {\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', action)\r\n        return () => window.removeEventListener('keydown', action)\r\n    }, [action])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}